use async_graphql::{Context, Error, Object, Result};
use bson::Uuid;
use s3::Bucket;
use url::Url;

/// Defines pre-signed URL expiration time of 1d.
pub static PATH_EXPIRATION_TIME: u32 = 86400;
pub static NGINX_PATH: &'static str = "/api/media";

/// Describes GraphQL invoice queries.
pub struct Query;

#[Object]
impl Query {
    /// Returns a path for a media of a specific UUID.
    ///
    /// Sets the path generated by MinIO behind NGINX_PATH.
    /// Creates pre-signed paths with PATH_EXPIRATION_TIME.
    async fn get_media_path<'a>(
        &self,
        ctx: &Context<'a>,
        #[graphql(desc = "UUID of media to retrieve.")] id: Uuid,
    ) -> Result<String> {
        let media_data_bucket = ctx.data::<Bucket>()?;
        let mut list_bucket_results = media_data_bucket.list(id.to_string(), None).await?;
        let message = format!("Media file of UUID: `{}` not found.", id);
        let mut list_bucket_result = list_bucket_results
            .pop()
            .ok_or(Error::new(message.clone()))?;
        let media_file_name = list_bucket_result
            .contents
            .pop()
            .ok_or(Error::new(message))?
            .key;
        let media_file_url_string =
            media_data_bucket.presign_get(media_file_name, PATH_EXPIRATION_TIME, None)?;
        let media_file_url = Url::parse(&media_file_url_string)?;
        let media_file_path = format!(
            "{}{}?{}",
            NGINX_PATH,
            media_file_url.path(),
            media_file_url.query().unwrap_or("")
        );
        Ok(media_file_path)
    }
}
