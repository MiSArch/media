use async_graphql::{Context, Error, Object, Result};
use bson::Uuid;
use s3::Bucket;

use crate::{authentication::authenticate_user, media::Media, media_connection::MediaConnection};

/// Describes GraphQL invoice queries.
pub struct Query;

#[Object]
impl Query {
    /// Entity resolver for media of specific id.
    ///
    /// Sets the path generated by MinIO behind PROXY_PATH.
    /// Creates pre-signed paths with PATH_EXPIRATION_TIME.
    async fn media_entity_resolver<'a>(
        &self,
        #[graphql(desc = "UUID of media file which a pre-signed path should be created for.")]
        id: Uuid,
    ) -> Result<Media> {
        let media = Media { id: id };
        Ok(media)
    }

    /// Returns all medias of the service.
    async fn get_medias<'a>(
        &self,
        ctx: &Context<'a>,
        #[graphql(desc = "Describes that the `first` N medias should be retrieved.")] first: Option<
            usize,
        >,
        #[graphql(desc = "Describes how many medias should be skipped at the beginning.")]
        skip: Option<usize>,
    ) -> Result<MediaConnection> {
        authenticate_user(&ctx, None)?;
        let media_data_bucket = ctx.data::<Bucket>()?;
        let mut list_bucket_results = media_data_bucket.list("".to_string(), None).await?;
        let list_bucket_result = list_bucket_results
            .pop()
            .ok_or(Error::new("`list_bucket_results` is empty."))?;
        let total_count = list_bucket_result.contents.len();
        let definitely_skip = skip.unwrap_or(0);
        let definitely_first = first.unwrap_or(usize::MAX);
        let medias_part: Vec<Media> = list_bucket_result
            .contents
            .iter()
            .skip(definitely_skip)
            .take(definitely_first)
            .map(|object| Media::try_from(object.key.as_str()))
            .collect::<Result<Vec<Media>>>()?;
        let has_next_page = total_count > medias_part.len() + definitely_skip;
        Ok(MediaConnection {
            nodes: medias_part,
            has_next_page,
            total_count: total_count as u64,
        })
    }
}
